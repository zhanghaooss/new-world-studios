{"ast":null,"code":"/**\r\n * 描述座位\r\n */\nclass Seat {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.type = 0; // 座位类型 0:未分配   1:普通座位   2:过道\n    this.selected = false; //指定当前作为是否为选中状态\n  }\n}\n\n/**\r\n * 描述座位选择面板\r\n */\nclass SeatSelector {\n  //构造器，new创建对象时为属性赋值\n  constructor(rows, cols, canvasId) {\n    this.rows = rows;\n    this.cols = cols;\n    this.canvas = document.getElementById(canvasId);\n    this.cvs = canvas.getContext(\"2d\");\n    // 自定义一些属性\n    this.seatSize = 20; // 指定每一个座位的宽高像素值\n    this.margin = 5; // 指定座位与座位之间的缝隙像素值\n\n    // 初始化座位模板   （二维数组，每个元素都是一个Seat对象）\n    this.seats = [];\n    for (let i = 0; i < rows; i++) {\n      let row = [];\n      for (let j = 0; j < cols; j++) {\n        row[j] = new Seat(i, j);\n      }\n      this.seats[i] = row;\n    }\n\n    // 为canvas初始化width与height\n    this.canvas.width = cols * this.seatSize + (cols + 1) * this.margin;\n    this.canvas.height = rows * this.seatSize + (rows + 1) * this.margin;\n    this.canvas.style.display = \"block\";\n\n    // 为canvas绑定事件\n    this.canvas.addEventListener(\"mousedown\", event => {\n      let rect = this.canvas.getBoundingClientRect(); // 获取canvas在网页中的矩形区域\n      let x = event.clientX - rect.left;\n      let y = event.clientY - rect.top;\n      // 记录一下这个起始坐标点\n      this.startPoint = {\n        x,\n        y\n      };\n    });\n\n    // 为canvas绑定事件\n    this.canvas.addEventListener(\"mouseup\", event => {\n      let rect = this.canvas.getBoundingClientRect(); // 获取canvas在网页中的矩形区域\n      let x = event.clientX - rect.left;\n      let y = event.clientY - rect.top;\n      // 记录一下这个起始坐标点\n      this.endPoint = {\n        x,\n        y\n      };\n\n      // 根据起始点与结束点，整理出来一个矩形框对象： {x1,y1, x2,y2}   左上角点坐标   右下角点坐标\n      let selectRect = {\n        x1: Math.min(this.startPoint.x, this.endPoint.x),\n        y1: Math.min(this.startPoint.y, this.endPoint.y),\n        x2: Math.max(this.startPoint.x, this.endPoint.x),\n        y2: Math.max(this.startPoint.y, this.endPoint.y)\n      };\n\n      // 判断每个座位是否在该矩形框内，如果是，则改变座位的selected属性\n      // 遍历每一个座位\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.cols; j++) {\n          // 获取每一个座位\n          let seat = this.seats[i][j];\n          // 计算该座位在canvas中的上、下、左、右边界值\n          let top = i * this.seatSize + (i + 1) * this.margin;\n          let bottom = (i + 1) * this.seatSize + (i + 1) * this.margin;\n          let left = j * this.seatSize + (j + 1) * this.margin;\n          let right = (j + 1) * this.seatSize + (j + 1) * this.margin;\n          // 经过判断，判断该座位是否不在矩形框\n          if (top > selectRect.y2 || left > selectRect.x2 || bottom < selectRect.y1 || right < selectRect.x1) {\n            // 没框住该座位\n          } else {\n            if (seat.type == 0) {\n              //当前座位还未分配\n              seat.selected = !seat.selected;\n            }\n          }\n        }\n      }\n      this.draw();\n    });\n  }\n\n  /** 绘制canvas中的内容 */\n  draw() {\n    // 清除所有像素点\n    this.cvs.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    // 绘制每一个座位\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        // 根据当前座位类型的不同，绘制不同的样式\n        let seat = this.seats[i][j];\n\n        // 根据座位的类型，设置不同的颜色\n        if (seat.type == 1) {\n          // 普通座位 设置为红色\n          this.cvs.fillStyle = \"#a11\";\n          this.cvs.fillRect(j * this.seatSize + (j + 1) * this.margin, i * this.seatSize + (i + 1) * this.margin, this.seatSize, this.seatSize);\n          continue;\n        }\n\n        // 根据座位的类型，设置不同的颜色\n        if (seat.type == 2) {\n          this.cvs.fillStyle = \"#3333\";\n          this.cvs.fillRect(j * this.seatSize + (j + 1) * this.margin, i * this.seatSize + (i + 1) * this.margin, this.seatSize, this.seatSize);\n          continue;\n        }\n        // 根据座位的选中未选中，设置不同的颜色\n        if (seat.selected) {\n          this.cvs.fillStyle = \"#36D\";\n          this.cvs.fillRect(j * this.seatSize + (j + 1) * this.margin, i * this.seatSize + (i + 1) * this.margin, this.seatSize, this.seatSize);\n        } else {\n          this.cvs.fillStyle = \"#36D6\";\n          this.cvs.fillRect(j * this.seatSize + (j + 1) * this.margin, i * this.seatSize + (i + 1) * this.margin, this.seatSize, this.seatSize);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * 将所有的作为都设置为未选中，然后重新绘制即可\r\n   */\n  setNoSelect() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let seat = this.seats[i][j];\n        seat.selected = false;\n      }\n    }\n    this.draw();\n  }\n\n  /**\r\n   * 将选中的座位的类型改为普通座位：type:1\r\n   */\n  setSelectedSeatsToNormalSeats() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let seat = this.seats[i][j];\n        if (seat.selected) {\n          seat.type = 1;\n          seat.selected = false; // 将选中状态设置为false\n        }\n      }\n    }\n\n    this.draw();\n  }\n\n  /**\r\n   * 将选中的座位的类型改为过道：type:2\r\n   */\n  setSelectedSeatsToGangway() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let seat = this.seats[i][j];\n        if (seat.selected) {\n          seat.type = 2;\n          seat.selected = false; // 将选中状态设置为false\n        }\n      }\n    }\n\n    this.draw();\n  }\n\n  /**\r\n   * 获取座位模板的json字符串\r\n   */\n  getSeatTemplateJsonString() {\n    let rowNum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      // 判断当前这一排有没有不是过道的座位\n      let rowData = this.seats[i]; // 当前这一排数据\n      let filteredRowData = rowData.filter(item => {\n        return item.type != 2;\n      });\n      if (filteredRowData.length == 0) {\n        continue;\n      }\n      // 记录排号\n      rowNum += 1;\n\n      // 记录列号\n      let colNum = 0;\n      for (let j = 0; j < this.cols; j++) {\n        let seat = this.seats[i][j];\n        if (seat.type == 0) {\n          throw \"还有未分配的座位\";\n        } else if (seat.type == 1) {\n          colNum += 1;\n          seat.name = `${rowNum}排${colNum}号`;\n        }\n      }\n    }\n    let str = JSON.stringify(this.seats);\n    return str;\n  }\n\n  /**\r\n   * 获取模版中所有的座位数量\r\n   */\n  getSeatCount() {\n    let count = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let seat = this.seats[i][j];\n        if (seat.type == 1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n}\nexport default SeatSelector;","map":{"version":3,"names":["Seat","constructor","x","y","type","selected","SeatSelector","rows","cols","canvasId","canvas","document","getElementById","cvs","getContext","seatSize","margin","seats","i","row","j","width","height","style","display","addEventListener","event","rect","getBoundingClientRect","clientX","left","clientY","top","startPoint","endPoint","selectRect","x1","Math","min","y1","x2","max","y2","seat","bottom","right","draw","clearRect","fillStyle","fillRect","setNoSelect","setSelectedSeatsToNormalSeats","setSelectedSeatsToGangway","getSeatTemplateJsonString","rowNum","rowData","filteredRowData","filter","item","length","colNum","name","str","JSON","stringify","getSeatCount","count"],"sources":["C:/Users/29439/Desktop/New World Studios/nwstudio-ms-client/src/libs/SeatSelector.js"],"sourcesContent":["/**\r\n * 描述座位\r\n */\r\nclass Seat {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.type = 0; // 座位类型 0:未分配   1:普通座位   2:过道\r\n    this.selected = false; //指定当前作为是否为选中状态\r\n  }\r\n}\r\n\r\n/**\r\n * 描述座位选择面板\r\n */\r\nclass SeatSelector {\r\n  //构造器，new创建对象时为属性赋值\r\n  constructor(rows, cols, canvasId) {\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n    this.canvas = document.getElementById(canvasId);\r\n    this.cvs = canvas.getContext(\"2d\");\r\n    // 自定义一些属性\r\n    this.seatSize = 20; // 指定每一个座位的宽高像素值\r\n    this.margin = 5; // 指定座位与座位之间的缝隙像素值\r\n\r\n    // 初始化座位模板   （二维数组，每个元素都是一个Seat对象）\r\n    this.seats = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row[j] = new Seat(i, j);\r\n      }\r\n      this.seats[i] = row;\r\n    }\r\n\r\n    // 为canvas初始化width与height\r\n    this.canvas.width = cols * this.seatSize + (cols + 1) * this.margin;\r\n    this.canvas.height = rows * this.seatSize + (rows + 1) * this.margin;\r\n    this.canvas.style.display = \"block\";\r\n\r\n    // 为canvas绑定事件\r\n    this.canvas.addEventListener(\"mousedown\", (event) => {\r\n      let rect = this.canvas.getBoundingClientRect(); // 获取canvas在网页中的矩形区域\r\n      let x = event.clientX - rect.left;\r\n      let y = event.clientY - rect.top;\r\n      // 记录一下这个起始坐标点\r\n      this.startPoint = { x, y };\r\n    });\r\n\r\n    // 为canvas绑定事件\r\n    this.canvas.addEventListener(\"mouseup\", (event) => {\r\n      let rect = this.canvas.getBoundingClientRect(); // 获取canvas在网页中的矩形区域\r\n      let x = event.clientX - rect.left;\r\n      let y = event.clientY - rect.top;\r\n      // 记录一下这个起始坐标点\r\n      this.endPoint = { x, y };\r\n\r\n      // 根据起始点与结束点，整理出来一个矩形框对象： {x1,y1, x2,y2}   左上角点坐标   右下角点坐标\r\n      let selectRect = {\r\n        x1: Math.min(this.startPoint.x, this.endPoint.x),\r\n        y1: Math.min(this.startPoint.y, this.endPoint.y),\r\n        x2: Math.max(this.startPoint.x, this.endPoint.x),\r\n        y2: Math.max(this.startPoint.y, this.endPoint.y),\r\n      };\r\n\r\n      // 判断每个座位是否在该矩形框内，如果是，则改变座位的selected属性\r\n      // 遍历每一个座位\r\n      for (let i = 0; i < this.rows; i++) {\r\n        for (let j = 0; j < this.cols; j++) {\r\n          // 获取每一个座位\r\n          let seat = this.seats[i][j];\r\n          // 计算该座位在canvas中的上、下、左、右边界值\r\n          let top = i * this.seatSize + (i + 1) * this.margin;\r\n          let bottom = (i + 1) * this.seatSize + (i + 1) * this.margin;\r\n          let left = j * this.seatSize + (j + 1) * this.margin;\r\n          let right = (j + 1) * this.seatSize + (j + 1) * this.margin;\r\n          // 经过判断，判断该座位是否不在矩形框\r\n          if (\r\n            top > selectRect.y2 ||\r\n            left > selectRect.x2 ||\r\n            bottom < selectRect.y1 ||\r\n            right < selectRect.x1\r\n          ) {\r\n            // 没框住该座位\r\n          } else {\r\n            if (seat.type == 0) {\r\n              //当前座位还未分配\r\n              seat.selected = !seat.selected;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.draw();\r\n    });\r\n  }\r\n\r\n  /** 绘制canvas中的内容 */\r\n  draw() {\r\n    // 清除所有像素点\r\n    this.cvs.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    // 绘制每一个座位\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        // 根据当前座位类型的不同，绘制不同的样式\r\n        let seat = this.seats[i][j];\r\n        \r\n        // 根据座位的类型，设置不同的颜色\r\n        if (seat.type == 1) {\r\n          // 普通座位 设置为红色\r\n          this.cvs.fillStyle = \"#a11\";\r\n          this.cvs.fillRect(\r\n            j * this.seatSize + (j + 1) * this.margin,\r\n            i * this.seatSize + (i + 1) * this.margin,\r\n            this.seatSize,\r\n            this.seatSize\r\n          );\r\n          continue;\r\n        }\r\n\r\n        // 根据座位的类型，设置不同的颜色\r\n        if (seat.type == 2) {\r\n          this.cvs.fillStyle = \"#3333\";\r\n          this.cvs.fillRect(\r\n            j * this.seatSize + (j + 1) * this.margin,\r\n            i * this.seatSize + (i + 1) * this.margin,\r\n            this.seatSize,\r\n            this.seatSize\r\n          );\r\n          continue;\r\n        }\r\n        // 根据座位的选中未选中，设置不同的颜色\r\n        if (seat.selected) {\r\n          this.cvs.fillStyle = \"#36D\";\r\n          this.cvs.fillRect(\r\n            j * this.seatSize + (j + 1) * this.margin,\r\n            i * this.seatSize + (i + 1) * this.margin,\r\n            this.seatSize,\r\n            this.seatSize\r\n          );\r\n        } else {\r\n          this.cvs.fillStyle = \"#36D6\";\r\n          this.cvs.fillRect(\r\n            j * this.seatSize + (j + 1) * this.margin,\r\n            i * this.seatSize + (i + 1) * this.margin,\r\n            this.seatSize,\r\n            this.seatSize\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 将所有的作为都设置为未选中，然后重新绘制即可\r\n   */\r\n  setNoSelect() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        let seat = this.seats[i][j];\r\n        seat.selected = false;\r\n      }\r\n    }\r\n    this.draw();\r\n  }\r\n\r\n  /**\r\n   * 将选中的座位的类型改为普通座位：type:1\r\n   */\r\n  setSelectedSeatsToNormalSeats() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        let seat = this.seats[i][j];\r\n        if (seat.selected) {\r\n          seat.type = 1;\r\n          seat.selected = false; // 将选中状态设置为false\r\n        }\r\n      }\r\n    }\r\n    this.draw();\r\n  }\r\n\r\n  /**\r\n   * 将选中的座位的类型改为过道：type:2\r\n   */\r\n  setSelectedSeatsToGangway() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        let seat = this.seats[i][j];\r\n        if (seat.selected) {\r\n          seat.type = 2;\r\n          seat.selected = false; // 将选中状态设置为false\r\n        }\r\n      }\r\n    }\r\n    this.draw();\r\n  }\r\n\r\n  /**\r\n   * 获取座位模板的json字符串\r\n   */\r\n  getSeatTemplateJsonString(){\r\n    let rowNum = 0\r\n    for (let i = 0; i < this.rows; i++) {\r\n      // 判断当前这一排有没有不是过道的座位\r\n      let rowData = this.seats[i]  // 当前这一排数据\r\n      let filteredRowData = rowData.filter((item)=>{return item.type != 2})\r\n      if(filteredRowData.length == 0){\r\n        continue;\r\n      }\r\n      // 记录排号\r\n      rowNum += 1\r\n\r\n      // 记录列号\r\n      let colNum = 0\r\n      for (let j = 0; j < this.cols; j++) {\r\n        let seat = this.seats[i][j];\r\n        if (seat.type==0) {\r\n          throw \"还有未分配的座位\"\r\n        }else if(seat.type==1){\r\n          colNum += 1\r\n          seat.name = `${rowNum}排${colNum}号`\r\n        }\r\n      }\r\n    }\r\n    let str = JSON.stringify(this.seats)\r\n    return str\r\n  }\r\n\r\n  /**\r\n   * 获取模版中所有的座位数量\r\n   */\r\n  getSeatCount(){\r\n    let count = 0\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        let seat = this.seats[i][j];\r\n        if (seat.type==1) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n}\r\n\r\nexport default SeatSelector;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}